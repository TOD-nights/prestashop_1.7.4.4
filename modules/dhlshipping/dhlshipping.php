<?php
/**
 *  @author   DHL Italy <dhlecommerceshipping.it@dhl.com>
 *  @copyright 2018 DHL Italy
 *  @license  http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

if (!defined('_PS_VERSION_')) {
    exit;
}

require_once 'classes' . DIRECTORY_SEPARATOR . 'DhlJsonConfig.php';

class Dhlshipping extends Module
{
    const KEY_DESCRIPTION_MARKER = '-- Generated by DHL --';

    const KEY_LENGTH = 32;

    protected $config_form = false;

    protected $jsonConfig = null;

    public function __construct()
    {
        $this->name = 'dhlshipping';
        $this->tab = 'shipping_logistics';
        $this->version = '2.1.8';
        $this->author = 'DHL';
        $this->need_instance = 0;

        /**
         * Set $this->bootstrap to true if your module is compliant with bootstrap (PrestaShop 1.6)
         */
        $this->bootstrap = true;

        $this->module_key = 'f4cde70b9f497971cb8fd031c2471866';

        parent::__construct();

        $this->displayName = $this->l('DHL Shipping');
        $this->description = $this->l('Ship easily with DHL');

        $this->ps_versions_compliancy = array('min' => '1.6', 'max' => _PS_VERSION_);

        $this->jsonConfig = new DhlJsonConfig();
    }

    /**
     * Don't forget to create update methods if needed:
     * http://doc.prestashop.com/display/PS16/Enabling+the+Auto-Update
     */
    public function install()
    {
        $keyId = $this->getKeyId();
        $wsKey = new WebserviceKey($keyId ? $keyId : null);
        $wsKey->active = true;
        $wsKey->description = self::KEY_DESCRIPTION_MARKER;

        do {
            $wsKey->key = $this->generateKey(self::KEY_LENGTH);
        } while (WebserviceKey::keyExists($wsKey->key));

        $wsKey->add();

        $this->setWebserviceKeyPermission($wsKey->id);

        $configuration = new stdClass();
        $configuration->soap_key = $wsKey->key;

        Configuration::updateValue('GSPEDDHL_CONFIGURATION', json_encode($configuration));

        return parent::install() &&
            $this->registerHook('actionAdminControllerSetMedia') &&
            $this->registerHook('displayBackOfficeHeader');
    }

    public function uninstall()
    {
        Configuration::deleteByName('GSPEDDHL_CONFIGURATION');

        return parent::uninstall();
    }

    /**
     * Load the configuration form
     */
    public function getContent()
    {
        /**
         * If values have been submitted in the form, process.
         */
        if (((bool)Tools::isSubmit('submitGspeddhlModule')) == true) {
            $this->postProcess();
        }

        $this->context->smarty->assign('module_dir', $this->_path);

        //$output = $this->context->smarty->fetch($this->local_path.'views/templates/admin/configure.tpl');
        //return $output.$this->renderForm();

        return $this->renderForm();
    }

    /**
     * Create the form that will be displayed in the configuration of your module.
     */
    protected function renderForm()
    {
        $helper = new HelperForm();

        $helper->show_toolbar = false;
        $helper->table = $this->table;
        $helper->module = $this;
        $helper->default_form_language = $this->context->language->id;
        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG', 0);

        $helper->identifier = $this->identifier;
        $helper->submit_action = 'submitGspeddhlModule';
        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false)
            .'&configure='.$this->name.'&tab_module='.$this->tab.'&module_name='.$this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');

        $helper->tpl_vars = array(
            'fields_value' => $this->getConfigFormValues(), /* Add values for your inputs */
            'languages' => $this->context->controller->getLanguages(),
            'id_language' => $this->context->language->id,
        );

        return $helper->generateForm(array($this->getConfigForm()));
    }

    /**
     * Create the structure of your form.
     */
    protected function getConfigForm()
    {
        return array(
            'form' => array(
                'legend' => array(
                    'title' => $this->l('DHL Settings'),
                    'icon' => 'icon-cogs',
                ),
                'input' => array(
                    array(
                        'col' => 3,
                        'type' => 'text',
                        'name' => 'GSPEDDHL_CONFIGURATION',
                        'label' => $this->l('Manage configuration'),
                    ),
                ),
                'submit' => array(
                    'title' => $this->l('Save'),
                ),
            ),
        );
    }

    /**
     * Set values for the inputs.
     */
    protected function getConfigFormValues()
    {
        return array(
            'GSPEDDHL_CONFIGURATION' => Configuration::get('GSPEDDHL_CONFIGURATION', '')
        );
    }

    /**
     * Save form data.
     */
    protected function postProcess()
    {
        $form_values = $this->getConfigFormValues();

        foreach (array_keys($form_values) as $key) {
            Configuration::updateValue($key, Tools::getValue($key));
        }
    }

    /**
     * Add the CSS & JavaScript files you want to be loaded in the BO.
     */
    public function hookActionAdminControllerSetMedia()
    {
        $this->context->controller->addJS($this->_path.'views/js/loader.js');
    }

    public function hookDisplayBackOfficeHeader()
    {
        return $this->getJsSnippet($this->jsonConfig->getConfigs());
    }

    protected function getJsSnippet($data)
    {
        $this->context->smarty->assign(array(
            'data' => $data,
        ));

        return $this->context->smarty->fetch($this->local_path . 'views/templates/admin/js_snippet.tpl');
    }

    public function generateKey($length)
    {
        $key = '';

        /* There are no O/0 in the codes in order to avoid confusion */
        $chars = "123456789ABCDEFGHIJKLMNPQRSTUVWXYZ";

        for ($i = 0; $i < $length; $i++) {
            $key .= Tools::substr($chars, mt_rand(0, Tools::strlen($chars) -1), 1);
        }

        return $key;
    }

    public function getKeyId()
    {
        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue('
		SELECT `id_webservice_account`
		FROM '._DB_PREFIX_.'webservice_account
		WHERE `description` = "'.pSQL(self::KEY_DESCRIPTION_MARKER).'"');
    }

    public function getWebserviceKey()
    {
        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue('
		SELECT `key`
		FROM '._DB_PREFIX_.'webservice_account
		WHERE `description` = "'.pSQL(self::KEY_DESCRIPTION_MARKER).'"');
    }

    public function setWebserviceKeyPermission($keyId = null)
    {
        if ($keyId === null) {
            $keyId = $this->getKeyId();
        }

        $permissions_file = dirname(__FILE__) . '/data/permissions.json';
        $jsonPermissions = Tools::file_get_contents($permissions_file);
        $permissions_to_set = json_decode($jsonPermissions, true);
        WebserviceKey::setPermissionForAccount($keyId, $permissions_to_set);
    }
}
